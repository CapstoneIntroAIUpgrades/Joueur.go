<%page args="obj_name"/>package impl
<%include file='functions.noCreer' /><%
	obj = game if obj_name == 'Game' else game_objs[obj_key]
	parents = list()
	if 'parentClasses' in obj:
		parents.extend(obj['parentClasses'])
	if obj_name in ['Game', 'GameObject']:
		parents.append('base.' + obj_name)
	attr_names_by_len = sorted(list(obj['attribute_names']), key=len)
	longest_attr_name_len = len(attr_names_by_len[-1]) if attr_names_by_len else 0

	import_game = False
	if obj_name in ['Game', 'GameObject']:
		import_game = True
	if not import_game:
		for base_type in shared['go']['all_types_in'](obj):
			if base_type['is_game_object']:
				import_game = True
				break
%>
import (
	"errors"
	"joueur/base"
% if import_game:
	"joueur/games/${underscore(game_name)}"
% endif
)

${shared['go']['doc_string'](
	obj_name + 'Impl',
	'is the struct that implements the container for {obj_name} instances in {game_name}.'.format(
		obj_name=obj_name,
		game_name=game_name
	)
)}
type ${obj_name}Impl struct {
%	for parent in parents:
	${parent}Impl
%	endfor

%	if obj_name == 'GameObject':
	game${' ' * (5 + longest_attr_name_len - len('game'))}*GameImpl
%   endif
%	for attr_name in obj['attribute_names']:
%	if not (obj_name == 'GameObject' and attr_name == 'id'):
<%		attr = obj['attributes'][attr_name]
		spaces = ' ' * (1 + longest_attr_name_len - len(attr_name))

		combined = ''.join([attr_name, 'Impl', spaces, shared['go']['type'](attr['type'])])

%>	${combined}
% 	endif
%	endfor
}
%   if obj_name == 'GameObject':

// Game returns a pointer to the ${game_name} Game instance
func (gameObjectImpl *GameObjectImpl) Game() ${shared['go']['package_name']}.Game {
	return gameObjectImpl.game
}
%   endif
%   for attr_name in obj['attribute_names']:
<%
		if obj_name == 'GameObject' and attr_name == 'id':
			continue
		attr = obj['attributes'][attr_name]
		ret_type = shared['go']['type'](attr['type'])
%>
${shared['go']['doc_string'](attr_name + ' returns', attr)}
func (${lowercase_first(obj_name)}Impl *${obj_name}Impl) ${upcase_first(attr_name)}() ${ret_type} {
	return ${lowercase_first(obj_name)}Impl.${attr_name}Impl
}
%   endfor
%   for func_name in obj['function_names']:
<%
		func = obj['functions'][func_name]
		ret_type = shared['go']['type'](func['returns']['type'], True) if func['returns'] else ''
		argify = lambda a : '{} {}'.format(shared['go']['variable_name_safe'](a['name']), shared['go']['type'](a['type']))
		args = ', '.join([argify(a) for a in func['arguments']])
%>
${lowercase_first(shared['go']['doc_string'](func_name + ' runs logic that', func))}
func (${lowercase_first(obj_name)}Impl *${obj_name}Impl) ${upcase_first(func_name)}(${args})${(' '+ret_type) if ret_type else ''} {
	${'return ' if ret_type else ''}${lowercase_first(obj_name)}Impl.RunOnServer("${func_name}", map[string]interface{}{
%		for arg in func['arguments']:
		"${arg['name']}": ${shared['go']['variable_name_safe'](arg['name'])},
%		endfor
	})${('.('+ret_type+')') if ret_type else ''}
}
%   endfor

// InitImplDefaults initializes safe defaults for all fields in ${obj_name}.
func (${lowercase_first(obj_name)}Impl *${obj_name}Impl) InitImplDefaults() {
%		for i, parent in enumerate(obj['parentClasses'] + [] if not obj_name in ['Game', 'GameObject'] else [obj_name]):
	${lowercase_first(obj_name)}Impl.${parent}Impl.InitImplDefaults()
%		endfor

%   for attr_name in obj['attribute_names']:
<%	if shared['go']['skip_attribute'](obj_name, attr_name):
		continue
%>	${lowercase_first(obj_name)}Impl.${attr_name}Impl = ${shared['go']['default_value'](obj['attributes'][attr_name]['type'])}
%   endfor
}

// DeltaMerge merges the delta for a given attribute in ${obj_name}.
func (${lowercase_first(obj_name)}Impl *${obj_name}Impl) DeltaMerge(
	deltaMerge base.DeltaMerge,
	attribute string,
	delta interface{},
) (bool, error) {
%	for i, parent in enumerate(parents):
<%	suf = '' if i == 0 else str(i + 1)
	if parent.startswith('base.'):
		parent = parent[5:]
%>	merged${suf}, err${suf} := ${lowercase_first(obj_name)}Impl.${parent}Impl.DeltaMerge(
		deltaMerge,
		attribute,
		delta,
	)
	if merged${suf} || err${suf} != nil {
		return merged${suf}, err${suf}
	}
% 	endfor

<%
	dm = shared['go']['package_name'] + 'DeltaMerge'
	attribute_names = []
	for attr_name in obj['attribute_names']:
		if shared['go']['skip_attribute'](obj_name, attr_name):
			continue
		attribute_names.append(attr_name)
	if not attribute_names:
		dm  = '_'

%>	${dm}, ok := deltaMerge.(DeltaMerge)
	if !ok {
		return false, errors.New(
			"deltaMerge is not the expected type of: " +
				"'${shared['go']['package_name']}.impl.DeltaMerge'",
		)
	}

%	if attribute_names:
	switch attribute {
%		for attr_name in attribute_names:
<%			attr = obj['attributes'][attr_name]
			impl = '{}Impl.{}Impl'.format(lowercase_first(obj_name), attr_name)
%>	case "${attr_name}":
		${impl} = ${dm}.${shared['go']['find_deep_type_name'](attr['type'])}(${
		(('&' + impl + ', ') if shared['go']['is_type_deep'](attr['type']) else '') + 'delta'
		})
		return true, nil
%		endfor
	}

%	endif
	return false, nil // no errors in delta merging
}
% if 'tiled' in parent_data_names:
%	if obj_name == 'Tile':

// -- Tiled Game Utils -- ${'\\\\'}

// GetNeighbors returns an array of the neighbors of this Tile.
func (tileImpl *TileImpl) GetNeighbors() []${shared['go']['package_name']}.Tile {
	neighbors := []${shared['go']['package_name']}.Tile{}

	if tileImpl.tileNorthImpl != nil {
		neighbors = append(neighbors, tileImpl.tileNorthImpl)
	}

	if tileImpl.tileEastImpl != nil {
		neighbors = append(neighbors, tileImpl.tileEastImpl)
	}

	if tileImpl.tileSouthImpl != nil {
		neighbors = append(neighbors, tileImpl.tileSouthImpl)
	}

	if tileImpl.tileWestImpl != nil {
		neighbors = append(neighbors, tileImpl.tileWestImpl)
	}

	return neighbors
}

// IsPathable returns if the Tile is pathable for FindPath
func (tileImpl *TileImpl) IsPathable() bool {
${merge(
	'\t// ', 'is-pathable',
	'\treturn false // TODO: developer add game logic here!',
	help=False
)}
}

// HasNeighbor checks if this Tile has a specific neighboring Tile.
func (tileImpl *TileImpl) HasNeighbor(tile ${shared['go']['package_name']}.Tile) bool {
	return tile != nil &&
		(tileImpl.tileNorthImpl == tile ||
			tileImpl.tileEastImpl == tile ||
			tileImpl.tileSouthImpl == tile ||
			tileImpl.tileWestImpl == tile)
}
%	endif
%	if obj_name == 'Game':

// -- Tiled Game Utils -- ${'\\\\'}

// GetTileAt returns the Tile at a give position (x, y).
func (gameImpl *GameImpl) GetTileAt(x int64, y int64) ${shared['go']['package_name']}.Tile {
	if x < 0 || y < 0 || x >= gameImpl.mapWidthImpl || y >= gameImpl.mapHeightImpl {
		// out of bounds
		return nil
	}

	return gameImpl.tilesImpl[x+y*gameImpl.mapWidthImpl]
}
%	endif
% endif
