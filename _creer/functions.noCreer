<%
if not 'go' in shared:
    import textwrap

    shared['go'] = {}
    shared['go']['package_name'] = game_name.lower()

    def go_type(type_obj, package=True):
        base_type = type_obj['name']

        if base_type == 'dictionary':
            return 'map[{}]{}'.format(
                go_type(type_obj['keyType'], package),
                go_type(type_obj['valueType'], package)
            )
        elif base_type == 'list':
            return '[]' + go_type(type_obj['valueType'], package)
        elif base_type == 'int':
            return 'int64'
        elif  base_type == 'float':
            return 'float64'
        elif type_obj['is_game_object']:
            if package:
                return '{}.{}'.format(shared['go']['package_name'], base_type)
            return base_type
        elif base_type == 'boolean':
            return 'bool'
        else: # should only be string
            return base_type
    shared['go']['type'] = go_type


    def go_default_value(type_obj, package=True):
        base_type = type_obj['name']
        def_value = type_obj['default'] if 'default' in type_obj else None

        if base_type == "string":
            return '"{}"'.format(def_value or "")
        elif base_type == "dictionary":
            return 'make(map[{}]{})'.format(go_type(type_obj['keyType'], package), go_type(type_obj['valueType'], package))
        elif base_type == "list":
            return '[]{}'.format(go_type(type_obj['valueType'], package)) + '{}'
        elif base_type == "int" or base_type == "float":
            return str(def_value or 0)
        elif base_type == "boolean":
            return 'false' if def_value else 'true'
        else:
            return "nil"
    shared['go']['default_value'] = go_default_value

    def go_doc_string(prefix, val, remove_from_beginning='', indent=0):
        if type(val) == str:
            desc = val
            obj = None
        else:
            desc = val['description']
            obj = val
        desc = lowercase_first(desc)

        if remove_from_beginning and desc.startswith(remove_from_beginning):
            desc = desc[len(remove_from_beginning):] # chop off that part
        if prefix:
            desc = '{} {}'.format(upcase_first(prefix), desc)

        text = (desc
            .replace('Null', 'Nil')
            .replace('null', 'nil')
            .replace('a list', 'an array')
            .replace('list', 'array')
            .replace('List', 'Array')
        )

        wrapper_prefix = ('\t'*indent) + '// '
        tabsize=8
        wrapper = textwrap.TextWrapper(
            width=(78 - 3 - indent*tabsize),
            tabsize=tabsize,
            replace_whitespace=False,
            expand_tabs=False,
            initial_indent=wrapper_prefix,
            subsequent_indent=wrapper_prefix
        )

        desc_lines = wrapper.wrap(text)

        if obj and 'type' in obj and obj['type'] and 'literals' in obj['type'] and obj['type']['literals']:
            literal_lines = wrapper.wrap('Literal Values: {}'.format(human_string_list(['"{}"'.format(s) for s in obj['type']['literals']])))
            desc_lines.extend(literal_lines)

        return '\n'.join(desc_lines)
    shared['go']['doc_string'] = go_doc_string

    def go_skip_attribute(obj_name, attr_name):
        #if obj_name == 'Game':
        #    if attr_name == 'GameObjects'
        if obj_name == 'GameObject':
            if attr_name == 'id':
                return True
        return False
    shared['go']['skip_attribute'] = go_skip_attribute

    def go_function_top(function_name, function_params, receiver="", public=True):
        strs = [go_doc_string(function_name, function_params), '\nfunc ']

        if receiver:
            receiverVar = lowercase_first(receiver)
            if receiver == 'AI':
                receiverVar = 'ai'
            strs.extend(['(', receiverVar, ' *', receiver, ') '])

        if public:
            strs.append(upcase_first(function_name))
        else:
            strs.append(function_name)

        strs.append('(')
        if len(function_params['arguments']) > 0:
            strs.append('\n') # each argument will get it's own line
            for arg in function_params['arguments']:
                strs.extend([
                    go_doc_string(function_name, function_params, indent=1), '\n',
                    '\t', arg['name'], ' ', go_type(arg['type']), ',\n'
                ])
        strs.append(') ')
        if 'returns' in function_params and function_params['returns']:
            strs.extend([go_type(function_params['returns']['type'], False), ' '])
        strs.append('{')

        return ''.join(strs)
    shared['go']['function_top'] = go_function_top

    def go_interface_for(obj_name, obj):
        is_base = obj_name in ['Game', 'GameObject']
        strs = [go_doc_string(obj_name + ' is', obj), '\ntype ', obj_name, ' interface {\n']

        parents = list(obj['parentClasses'] if 'parentClasses' in obj else [])
        if is_base:
            parents.append('base.' + obj_name)

        if parents:
            strs.extend(['\t// Parent interfaces\n'])
            for parent in parents:
                strs.extend(['\t', parent, '\n'])
            strs.append('\n')

        if 'attributes' in obj and obj['attributes']:
            strs.append('\t// -- Attributes -- \\\\\n')
            for attr_name in obj['attribute_names']:
                if obj_name == 'GameObject' and attr_name in ['id', 'gameObjectName']:
                    continue
                attr = obj['attributes'][attr_name]
                strs.extend([
                    '\n', go_doc_string(attr_name + ' is', attr, indent=1), '\n',
                    '\t', upcase_first(attr_name), '() ', go_type(attr['type'], False), '\n'])

        if obj['attributes'] and obj['functions']:
            strs.append('\n')

        if 'functions' in obj and obj['functions']:
            strs.append('\t// -- Methods -- \\\\\n')
            for func_name in obj['function_names']:
                func = obj['functions'][func_name]
                strs.extend([
                    '\n', go_doc_string(func_name, func, indent=1), '\n',
                    '\t', upcase_first(func_name), '(', ', '.join(
                        [go_type(a['type'], False) for a in func['arguments']]
                    ), ')', ((' ' + go_type(func['returns']['type'], False)) if func['returns'] else ''), '\n'])

        if 'tiled' in parent_data_names:
            if obj_name == 'Tile':
                strs.append("""
\t// -- Tiled Game Utils -- \\\\

\t// GetNeighbors returns an array of the neighbors of this Tile.
\tGetNeighbors() []Tile

\t// IsPathable returns if the Tile is pathable for FindPath
\tIsPathable() bool

\t// HasNeighbor checks if this Tile has a specific neighboring Tile.
\tHasNeighbor(Tile) bool
""")
            if obj_name == 'Game':
                strs.append("""
\t// -- Tiled Game Utils -- \\\\

\t// GetTileAt returns the Tile at a give position (x, y).
\tGetTileAt(int64, int64) Tile
""")

        strs.append('}\n')
        return ''.join(strs)
    shared['go']['interface_for'] = go_interface_for

    def go_format_imports(imports):
        if not imports:
            return ''
        if len(imports) == 1:
            return 'import "{}"\n\n'.format(imports[0])
        # else must be 2+ imports, so multiline it
        lines = ['\t"{}"'.format(line) for line in imports]
        return 'import ({}\n)\n\n'.format('\n'.join(lines))
    shared['go']['format_imports'] = go_format_imports

    def go_imports_for(obj_name):
        is_base = obj_name in ['Game', 'GameObject']
        imports = ['joueur/base'] if is_base else []
        return go_format_imports(imports)
    shared['go']['imports_for'] = go_imports_for

    def go_is_type_deep(type_obj):
        return type_obj['name'] in ['list', 'dictionary']
    shared['go']['is_type_deep'] = go_is_type_deep

    def go_find_deep_type_name(type_obj):
        type_name = type_obj['name']
        if type_name == 'list':
            return 'ArrayOf{}'.format(go_find_deep_type_name(type_obj['valueType']))
        elif type_name == 'dictionary':
            return 'MapOf{}To{}'.format(go_find_deep_type_name(type_obj['keyType']), go_find_deep_type_name(type_obj['valueType']))
        else:
            return upcase_first(type_name)
    shared['go']['find_deep_type_name'] = go_find_deep_type_name

%>