<%
if not 'go' in shared:
    shared['go'] = {}

    def go_type(type_obj):
        base_type = type_obj['name']

        if base_type == 'dictionary':
            return 'map[{}]{}'.format(
                go_type(type_obj['keyType']),
                go_type(type_obj['valueType'])
            )
        elif base_type == 'list':
            return '[]' + go_type(type_obj['valueType'])
        elif base_type == 'int':
            return 'int64'
        elif  base_type == 'float':
            return 'float64'
        elif type_obj['is_game_object']:
            return '*' + base_type
        elif base_type == 'boolean':
            return 'bool'
        else: # should only be string
            return base_type
    shared['go']['type'] = go_type


    def go_default_value(type_obj):
        base_type = type_obj['name']
        if base_type == "string":
            return '""'
        elif base_type == "dictionary":
            return 'map[{}]{}'.format(go_default_value(type_obj['keyType']), go_default_value(type_obj['valueType']))
        elif base_type == "list":
            return '[]'
        elif base_type == "int" or base_type == "float":
            return '0'
        elif base_type == "boolean":
            return 'false'
        else:
            return "nil"
    shared['go']['default_value'] = go_default_value

    def go_function_top(function_name, function_params, receiver="", public=True):
        strs = ['// ', function_params['description'], '\nfunc ']

        if receiver:
            receiverVar = lowercase_first(receiver)
            if receiver == 'AI':
                receiverVar = 'ai'
            strs.extend(['(', receiverVar, ' ', receiver, ') '])

        if public:
            strs.append(upcase_first(function_name))
        else:
            strs.append(function_name)

        strs.append('(')
        if len(function_params['arguments']) > 0:
            strs.append('\n') # each argument will get it's own line
            for arg in function_params['arguments']:
                strs.extend([
                    '\t// ', arg['description'], '\n',
                    '\t', arg['name'], ' ', go_type(arg['type']), ',\n'
                ])
        strs.append(') ')
        if 'returns' in function_params and function_params['returns']:
            strs.extend([go_type(function_params['returns']['type']), ' '])
        strs.append('{')

        return ''.join(strs)
    shared['go']['function_top'] = go_function_top
%>